// From https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys
if (!Object.keys) {
  Object.keys = (function() {
    'use strict';
    var hasOwnProperty = Object.prototype.hasOwnProperty,
        hasDontEnumBug = !({ toString: null }).propertyIsEnumerable('toString'),
        dontEnums = [
          'toString',
          'toLocaleString',
          'valueOf',
          'hasOwnProperty',
          'isPrototypeOf',
          'propertyIsEnumerable',
          'constructor'
        ],
        dontEnumsLength = dontEnums.length;

    return function(obj) {
      if (typeof obj !== 'function' && (typeof obj !== 'object' || obj === null)) {
        throw new TypeError('Object.keys called on non-object');
      }

      var result = [], prop, i;

      for (prop in obj) {
        if (hasOwnProperty.call(obj, prop)) {
          result.push(prop);
        }
      }

      if (hasDontEnumBug) {
        for (i = 0; i < dontEnumsLength; i++) {
          if (hasOwnProperty.call(obj, dontEnums[i])) {
            result.push(dontEnums[i]);
          }
        }
      }
      return result;
    };
  }());
}

/**
 * @fileoverview Custom functionality to apply throughout every adsize. This
 * has a dependency on common.js and utils.js
 */
var custom = (function() {

  /**
   * Classes which our JS hooks into. Add more class names as necessary.
   * @enum
   * @private
   */
  var elementClass_ = {
    item: 'js-item',
    itemName: 'js-item-name-txt',
    itemDescription: 'js-item-description-txt',
    itemPrice: 'js-item-price',
    itemSalePrice: 'js-item-saleprice',
    itemPriceSingle: 'js-item-price-single',
    itemPriceDouble: 'js-item-price-double',
    itemHide: 'js-item-hide',
    itemCTA: 'js-item-cta-holder'
  };

/**
  * Element IDs.
  * @enum {string}
  * @private
  */
  var elementId_ = {
    gpaDataProvider: 'gpa-data-provider'
  };

  /**
   * Initialization. Called from handleAdInitialized on each page.
   */
  function init() {
    utils.log('custom.init()');
    var data = common.getAdData();

    if (!data) return;

    // If you're using the swipe gallery to display feed items.
    initItemsUsingGallery_();

    // If you're NOT using the swipe gallery to display feed items.
    //initItemsWithoutGallery_();

    var languageMap_ = {
        "en": {
            "js-item-cta-txt": "VISIT SITE"
        },
        "languageKey": {
            "js-item-cta-txt": "NEW COPY"
        }
    };
     
    var publisher_language = (data && data.publisher &&
        data.publisher.language &&  data.publisher.language.undefined &&
        languageMap_[data.publisher.language.undefined]) ?
        data.publisher.language.undefined : Object.keys(languageMap_)[0];
     
    initCustomLanguageContent_(publisher_language, languageMap_);

  }

  /**
    * Uses the supplied publisher language to customize text. For each item
    * in the publisher languages language map, use the key to match an element's
    * class and the value as its text content.
    * @param {string} publisher_language Language code of publisher site on which
    *    this ad is appearing.
    * @param {!Object} language_map An object defined in such a way that the it
    *      can be used as a dictionary. Top-level keys match possible values of
    *      publisher_language. Another way to think about it is that each key
    *      in the language_map represents a value for which we will provide a
    *      translation.
    */
    function initCustomLanguageContent_(publisher_language, language_map) {
        var values = Object.keys(language_map[publisher_language]);
        values.forEach(function(key) {
          var targetElements = document.querySelectorAll('.' + key);
          targetElements = [].slice.call(targetElements);
          targetElements.forEach(function(element) {
            element.innerHTML = language_map[publisher_language][key];
          })
        });
    }

  /**
   * Find all items used in the swipe gallery and initialize custom behavior.
   * @private
   */
  function initItemsUsingGallery_() {
    var gallery = common.getGallery();

    // Apply settings to each item in the gallery
    var items = gallery.querySelectorAll('.' + elementClass_.item);

    for (var i = 0; i < items.length; i++) {
      var item = items[i];
      initItemDisplay_(item);
    }
  }

  /**
   * Find all items used outside the gallery and initialize custom behavior.
   * @private
   */
  function initItemsWithoutGallery_() {
    // Apply settings to each item
    var items = document.querySelectorAll('.' + elementClass_.item);

    for (var i = 0; i < items.length; i++) {
      var item = items[i];
      initItemDisplay_(item);
    }
  }

  /**
   * Set the display settings for each item.
   * Add any custom functionality you need applied on load.
   * @param {Element} item Item element.
   * @private
   */
  function initItemDisplay_(item) {

    // if you're using sales prices.
    //setSalePricesDisplay_(item);

    // Set mouseout.
    itemMouseOut(item);
  }

  /**
   * Sets the 3 price elements to display correctly when using sales price.
   * Find your price elements and set into common functionality.
   * @param {Element} item Item element.
   * @private
   */
  function setSalePricesDisplay_(item) {
    // Get reference to price elements
    var itemPrice = item.querySelector('.' + elementClass_.itemPrice);
    var itemSalePrice = item.querySelector('.' + elementClass_.itemSalePrice);
    var itemPriceSingle = item.querySelector('.' + elementClass_.itemPriceSingle);
    var itemPriceDouble = item.querySelector('.' + elementClass_.itemPriceDouble);
    var itemHide = item.querySelector('.' + elementClass_.itemHide);
    // switch between showing single or double price
    if ( itemPrice.textContent == itemSalePrice.textContent ) { // if prices are equal
        itemPriceDouble.style.opacity = 0; //show single price
        itemHide.style.display = "none"; // and hide one
        return;
    }
    if ( ( itemPrice.textContent == "") || ( itemSalePrice.textContent == "") ) { // if either price is empty
        itemPriceDouble.style.opacity = 0; // show single price
        return;
    }
    itemPriceSingle.style.opacity = 0; // show double price
  }

  /**
   * Custom Item Mouse Interactions. Add your own behavior.
   */

  /**
   * Custom Mouseover interaction functionality.
   * @param {Element} item
   */
  function itemMouseOver(item) {
  	// Mover Over Scripts
  }

  /**
   * Custom Mouseout interaction functionality.
   * @param {Element} item
   */
  function itemMouseOut(item) {
  	// Mover Out Scripts
  }


  /**
   * Custom updates per frame shown event.
   * @param {Event event
   */
  function galleryFrameShown(event) {
    var index = common.getCurrentItemIndex();
    
    updateArrowDisplay(index);
  }
 
  /**
   * Custom Mouseover interaction functionality.
   * @param {index} current index (zero based)
   */
  function updateArrowDisplay (index) {
    common.setCurrentItemIndex(index);
    var gallery = common.getGallery();
    var numFramesPerPage = common.galleryNumFramesPerPage(gallery);
    var itemsLength = gallery.querySelectorAll('.' + elementClass_.item).length;
    var numTotalPages = Math.ceil(itemsLength / numFramesPerPage);
    lastFrame = itemsLength;
    var lastFrameCondition;

    if (numFramesPerPage > 1) {
      lastFrameCondition = lastFrame;
    } else {
      lastFrameCondition = lastFrame - 1;
    }
 
    if (index <= 0) {
      leftEnd = true;
      rightEnd = false;
    } else if ( (index * numFramesPerPage) >= lastFrameCondition ) {
      rightEnd = true;
      leftEnd = false;
    } else {
      rightEnd = false;
      leftEnd = false;
    }
  }

  function transformDynamicData () {
      var dataProvider = document.querySelector('#' + elementId_.gpaDataProvider);
      dataProvider.addDataTransformer(function(dynamicData) {

        // Remove "00" cents from each price.
        for (var i = 0; i < dynamicData.Product.length; i++) {
          var item = dynamicData.Product[i];
          item.price = removeCentsFromString(item.price);
          item.salePrice = removeCentsFromString(item.salePrice);
          item.regularPrice = removeCentsFromString(item.regularPrice);
        };

      });
  }


  /**
   * Remove cents where cents = '00'.
   * @param {string} price Price.
   * @return {string}
   * @private
   */
  function removeCentsFromString(price) {
    if(! price) return;
    var matcher = /(\.|\,)0{2}(?![\d])/;
    return price.replace(matcher, '');
  };

  return {
    init: init,
    transformDynamicData: transformDynamicData,
    galleryFrameShown:galleryFrameShown,
    itemMouseOver: itemMouseOver,
    itemMouseOut: itemMouseOut
  };

})();